Grading at Mon May 11 02:20:45 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==356== Memcheck, a memory error detector
==356== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==356== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==356== Command: ./test-eval inp.1.txt
==356== Parent PID: 355
==356== 
==356== Invalid read of size 8
==356==    at 0x401A2F: is_straight_at (eval.c:177)
==356==    by 0x40293B: describe_hand (test-eval.c:49)
==356==    by 0x402CE1: main (test-eval.c:116)
==356==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==356==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==356==    by 0x40108F: add_card_to (deck-c4.c:29)
==356==    by 0x4034C5: hand_from_string (input.c:49)
==356==    by 0x402C66: main (test-eval.c:110)
==356== 
==356== Invalid read of size 4
==356==    at 0x401A32: is_straight_at (eval.c:177)
==356==    by 0x40293B: describe_hand (test-eval.c:49)
==356==    by 0x402CE1: main (test-eval.c:116)
==356==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==356== 
==356== 
==356== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==356==  Access not within mapped region at address 0x0
==356==    at 0x401A32: is_straight_at (eval.c:177)
==356==    by 0x40293B: describe_hand (test-eval.c:49)
==356==    by 0x402CE1: main (test-eval.c:116)
==356==  If you believe this happened as a result of a stack
==356==  overflow in your program's main thread (unlikely but
==356==  possible), you can try to increase the size of the
==356==  main thread stack using the --main-stacksize= flag.
==356==  The main thread stack size used in this run was 8388608.
==356== 
==356== HEAP SUMMARY:
==356==     in use at exit: 896 bytes in 18 blocks
==356==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==356== 
==356== LEAK SUMMARY:
==356==    definitely lost: 0 bytes in 0 blocks
==356==    indirectly lost: 0 bytes in 0 blocks
==356==      possibly lost: 0 bytes in 0 blocks
==356==    still reachable: 896 bytes in 18 blocks
==356==         suppressed: 0 bytes in 0 blocks
==356== Rerun with --leak-check=full to see details of leaked memory
==356== 
==356== For counts of detected and suppressed errors, rerun with: -v
==356== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==361== Memcheck, a memory error detector
==361== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==361== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==361== Command: ./test-eval inp.2.txt
==361== Parent PID: 360
==361== 
==361== Invalid read of size 8
==361==    at 0x401A2F: is_straight_at (eval.c:177)
==361==    by 0x40293B: describe_hand (test-eval.c:49)
==361==    by 0x402CE1: main (test-eval.c:116)
==361==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==361==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==361==    by 0x40108F: add_card_to (deck-c4.c:29)
==361==    by 0x4034C5: hand_from_string (input.c:49)
==361==    by 0x402C66: main (test-eval.c:110)
==361== 
==361== Invalid read of size 4
==361==    at 0x401A32: is_straight_at (eval.c:177)
==361==    by 0x40293B: describe_hand (test-eval.c:49)
==361==    by 0x402CE1: main (test-eval.c:116)
==361==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==361== 
==361== 
==361== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==361==  Access not within mapped region at address 0x0
==361==    at 0x401A32: is_straight_at (eval.c:177)
==361==    by 0x40293B: describe_hand (test-eval.c:49)
==361==    by 0x402CE1: main (test-eval.c:116)
==361==  If you believe this happened as a result of a stack
==361==  overflow in your program's main thread (unlikely but
==361==  possible), you can try to increase the size of the
==361==  main thread stack using the --main-stacksize= flag.
==361==  The main thread stack size used in this run was 8388608.
==361== 
==361== HEAP SUMMARY:
==361==     in use at exit: 880 bytes in 17 blocks
==361==   total heap usage: 28 allocs, 11 frees, 9,272 bytes allocated
==361== 
==361== LEAK SUMMARY:
==361==    definitely lost: 0 bytes in 0 blocks
==361==    indirectly lost: 0 bytes in 0 blocks
==361==      possibly lost: 0 bytes in 0 blocks
==361==    still reachable: 880 bytes in 17 blocks
==361==         suppressed: 0 bytes in 0 blocks
==361== Rerun with --leak-check=full to see details of leaked memory
==361== 
==361== For counts of detected and suppressed errors, rerun with: -v
==361== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==366== Memcheck, a memory error detector
==366== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==366== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==366== Command: ./test-eval inp.3.txt
==366== Parent PID: 365
==366== 
==366== Invalid read of size 8
==366==    at 0x401A2F: is_straight_at (eval.c:177)
==366==    by 0x40293B: describe_hand (test-eval.c:49)
==366==    by 0x402CE1: main (test-eval.c:116)
==366==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==366==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==366==    by 0x40108F: add_card_to (deck-c4.c:29)
==366==    by 0x4034C5: hand_from_string (input.c:49)
==366==    by 0x402C66: main (test-eval.c:110)
==366== 
==366== Invalid read of size 4
==366==    at 0x401A32: is_straight_at (eval.c:177)
==366==    by 0x40293B: describe_hand (test-eval.c:49)
==366==    by 0x402CE1: main (test-eval.c:116)
==366==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==366== 
==366== 
==366== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==366==  Access not within mapped region at address 0x0
==366==    at 0x401A32: is_straight_at (eval.c:177)
==366==    by 0x40293B: describe_hand (test-eval.c:49)
==366==    by 0x402CE1: main (test-eval.c:116)
==366==  If you believe this happened as a result of a stack
==366==  overflow in your program's main thread (unlikely but
==366==  possible), you can try to increase the size of the
==366==  main thread stack using the --main-stacksize= flag.
==366==  The main thread stack size used in this run was 8388608.
==366== 
==366== HEAP SUMMARY:
==366==     in use at exit: 864 bytes in 16 blocks
==366==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==366== 
==366== LEAK SUMMARY:
==366==    definitely lost: 0 bytes in 0 blocks
==366==    indirectly lost: 0 bytes in 0 blocks
==366==      possibly lost: 0 bytes in 0 blocks
==366==    still reachable: 864 bytes in 16 blocks
==366==         suppressed: 0 bytes in 0 blocks
==366== Rerun with --leak-check=full to see details of leaked memory
==366== 
==366== For counts of detected and suppressed errors, rerun with: -v
==366== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==371== Memcheck, a memory error detector
==371== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==371== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==371== Command: ./test-eval inp.4.txt
==371== Parent PID: 370
==371== 
==371== Invalid read of size 8
==371==    at 0x401A2F: is_straight_at (eval.c:177)
==371==    by 0x40293B: describe_hand (test-eval.c:49)
==371==    by 0x402CE1: main (test-eval.c:116)
==371==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==371==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==371==    by 0x40108F: add_card_to (deck-c4.c:29)
==371==    by 0x4034C5: hand_from_string (input.c:49)
==371==    by 0x402C66: main (test-eval.c:110)
==371== 
==371== Invalid read of size 4
==371==    at 0x401A32: is_straight_at (eval.c:177)
==371==    by 0x40293B: describe_hand (test-eval.c:49)
==371==    by 0x402CE1: main (test-eval.c:116)
==371==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==371== 
==371== 
==371== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==371==  Access not within mapped region at address 0x0
==371==    at 0x401A32: is_straight_at (eval.c:177)
==371==    by 0x40293B: describe_hand (test-eval.c:49)
==371==    by 0x402CE1: main (test-eval.c:116)
==371==  If you believe this happened as a result of a stack
==371==  overflow in your program's main thread (unlikely but
==371==  possible), you can try to increase the size of the
==371==  main thread stack using the --main-stacksize= flag.
==371==  The main thread stack size used in this run was 8388608.
==371== 
==371== HEAP SUMMARY:
==371==     in use at exit: 896 bytes in 18 blocks
==371==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==371== 
==371== LEAK SUMMARY:
==371==    definitely lost: 0 bytes in 0 blocks
==371==    indirectly lost: 0 bytes in 0 blocks
==371==      possibly lost: 0 bytes in 0 blocks
==371==    still reachable: 896 bytes in 18 blocks
==371==         suppressed: 0 bytes in 0 blocks
==371== Rerun with --leak-check=full to see details of leaked memory
==371== 
==371== For counts of detected and suppressed errors, rerun with: -v
==371== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==376== Memcheck, a memory error detector
==376== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==376== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==376== Command: ./test-eval inp.5.txt
==376== Parent PID: 375
==376== 
==376== Invalid read of size 8
==376==    at 0x401A2F: is_straight_at (eval.c:177)
==376==    by 0x40293B: describe_hand (test-eval.c:49)
==376==    by 0x402CE1: main (test-eval.c:116)
==376==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==376==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==376==    by 0x40108F: add_card_to (deck-c4.c:29)
==376==    by 0x4034C5: hand_from_string (input.c:49)
==376==    by 0x402C66: main (test-eval.c:110)
==376== 
==376== Invalid read of size 4
==376==    at 0x401A32: is_straight_at (eval.c:177)
==376==    by 0x40293B: describe_hand (test-eval.c:49)
==376==    by 0x402CE1: main (test-eval.c:116)
==376==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==376== 
==376== 
==376== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==376==  Access not within mapped region at address 0x0
==376==    at 0x401A32: is_straight_at (eval.c:177)
==376==    by 0x40293B: describe_hand (test-eval.c:49)
==376==    by 0x402CE1: main (test-eval.c:116)
==376==  If you believe this happened as a result of a stack
==376==  overflow in your program's main thread (unlikely but
==376==  possible), you can try to increase the size of the
==376==  main thread stack using the --main-stacksize= flag.
==376==  The main thread stack size used in this run was 8388608.
==376== 
==376== HEAP SUMMARY:
==376==     in use at exit: 864 bytes in 16 blocks
==376==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==376== 
==376== LEAK SUMMARY:
==376==    definitely lost: 0 bytes in 0 blocks
==376==    indirectly lost: 0 bytes in 0 blocks
==376==      possibly lost: 0 bytes in 0 blocks
==376==    still reachable: 864 bytes in 16 blocks
==376==         suppressed: 0 bytes in 0 blocks
==376== Rerun with --leak-check=full to see details of leaked memory
==376== 
==376== For counts of detected and suppressed errors, rerun with: -v
==376== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==381== Memcheck, a memory error detector
==381== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==381== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==381== Command: ./test-eval inp.6.txt
==381== Parent PID: 380
==381== 
==381== Invalid read of size 8
==381==    at 0x401A2F: is_straight_at (eval.c:177)
==381==    by 0x402904: describe_hand (test-eval.c:46)
==381==    by 0x402CE1: main (test-eval.c:116)
==381==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==381==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==381==    by 0x40108F: add_card_to (deck-c4.c:29)
==381==    by 0x4034C5: hand_from_string (input.c:49)
==381==    by 0x402C66: main (test-eval.c:110)
==381== 
==381== Invalid read of size 4
==381==    at 0x401A32: is_straight_at (eval.c:177)
==381==    by 0x402904: describe_hand (test-eval.c:46)
==381==    by 0x402CE1: main (test-eval.c:116)
==381==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==381== 
==381== 
==381== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==381==  Access not within mapped region at address 0x0
==381==    at 0x401A32: is_straight_at (eval.c:177)
==381==    by 0x402904: describe_hand (test-eval.c:46)
==381==    by 0x402CE1: main (test-eval.c:116)
==381==  If you believe this happened as a result of a stack
==381==  overflow in your program's main thread (unlikely but
==381==  possible), you can try to increase the size of the
==381==  main thread stack using the --main-stacksize= flag.
==381==  The main thread stack size used in this run was 8388608.
==381== 
==381== HEAP SUMMARY:
==381==     in use at exit: 896 bytes in 18 blocks
==381==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==381== 
==381== LEAK SUMMARY:
==381==    definitely lost: 0 bytes in 0 blocks
==381==    indirectly lost: 0 bytes in 0 blocks
==381==      possibly lost: 0 bytes in 0 blocks
==381==    still reachable: 896 bytes in 18 blocks
==381==         suppressed: 0 bytes in 0 blocks
==381== Rerun with --leak-check=full to see details of leaked memory
==381== 
==381== For counts of detected and suppressed errors, rerun with: -v
==381== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==386== Memcheck, a memory error detector
==386== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==386== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==386== Command: ./test-eval inp.7.txt
==386== Parent PID: 385
==386== 
==386== Invalid read of size 8
==386==    at 0x401A2F: is_straight_at (eval.c:177)
==386==    by 0x40293B: describe_hand (test-eval.c:49)
==386==    by 0x402CE1: main (test-eval.c:116)
==386==  Address 0x520c4d0 is 0 bytes after a block of size 48 alloc'd
==386==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==386==    by 0x40108F: add_card_to (deck-c4.c:29)
==386==    by 0x4034C5: hand_from_string (input.c:49)
==386==    by 0x402C66: main (test-eval.c:110)
==386== 
==386== Invalid read of size 4
==386==    at 0x401A32: is_straight_at (eval.c:177)
==386==    by 0x40293B: describe_hand (test-eval.c:49)
==386==    by 0x402CE1: main (test-eval.c:116)
==386==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==386== 
==386== 
==386== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==386==  Access not within mapped region at address 0x0
==386==    at 0x401A32: is_straight_at (eval.c:177)
==386==    by 0x40293B: describe_hand (test-eval.c:49)
==386==    by 0x402CE1: main (test-eval.c:116)
==386==  If you believe this happened as a result of a stack
==386==  overflow in your program's main thread (unlikely but
==386==  possible), you can try to increase the size of the
==386==  main thread stack using the --main-stacksize= flag.
==386==  The main thread stack size used in this run was 8388608.
==386== 
==386== HEAP SUMMARY:
==386==     in use at exit: 896 bytes in 18 blocks
==386==   total heap usage: 294 allocs, 276 frees, 14,736 bytes allocated
==386== 
==386== LEAK SUMMARY:
==386==    definitely lost: 0 bytes in 0 blocks
==386==    indirectly lost: 0 bytes in 0 blocks
==386==      possibly lost: 0 bytes in 0 blocks
==386==    still reachable: 896 bytes in 18 blocks
==386==         suppressed: 0 bytes in 0 blocks
==386== Rerun with --leak-check=full to see details of leaked memory
==386== 
==386== For counts of detected and suppressed errors, rerun with: -v
==386== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==391== Memcheck, a memory error detector
==391== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==391== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==391== Command: ./test-eval inp.8.txt
==391== Parent PID: 390
==391== 
==391== Invalid read of size 8
==391==    at 0x401A2F: is_straight_at (eval.c:177)
==391==    by 0x40293B: describe_hand (test-eval.c:49)
==391==    by 0x402CE1: main (test-eval.c:116)
==391==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==391==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==391==    by 0x40108F: add_card_to (deck-c4.c:29)
==391==    by 0x4034C5: hand_from_string (input.c:49)
==391==    by 0x402C66: main (test-eval.c:110)
==391== 
==391== Invalid read of size 4
==391==    at 0x401A32: is_straight_at (eval.c:177)
==391==    by 0x40293B: describe_hand (test-eval.c:49)
==391==    by 0x402CE1: main (test-eval.c:116)
==391==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==391== 
==391== 
==391== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==391==  Access not within mapped region at address 0x0
==391==    at 0x401A32: is_straight_at (eval.c:177)
==391==    by 0x40293B: describe_hand (test-eval.c:49)
==391==    by 0x402CE1: main (test-eval.c:116)
==391==  If you believe this happened as a result of a stack
==391==  overflow in your program's main thread (unlikely but
==391==  possible), you can try to increase the size of the
==391==  main thread stack using the --main-stacksize= flag.
==391==  The main thread stack size used in this run was 8388608.
==391== 
==391== HEAP SUMMARY:
==391==     in use at exit: 896 bytes in 18 blocks
==391==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==391== 
==391== LEAK SUMMARY:
==391==    definitely lost: 0 bytes in 0 blocks
==391==    indirectly lost: 0 bytes in 0 blocks
==391==      possibly lost: 0 bytes in 0 blocks
==391==    still reachable: 896 bytes in 18 blocks
==391==         suppressed: 0 bytes in 0 blocks
==391== Rerun with --leak-check=full to see details of leaked memory
==391== 
==391== For counts of detected and suppressed errors, rerun with: -v
==391== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==396== Memcheck, a memory error detector
==396== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==396== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==396== Command: ./test-eval inp.9.txt
==396== Parent PID: 395
==396== 
==396== Invalid read of size 8
==396==    at 0x401A2F: is_straight_at (eval.c:177)
==396==    by 0x402904: describe_hand (test-eval.c:46)
==396==    by 0x402CE1: main (test-eval.c:116)
==396==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==396==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==396==    by 0x40108F: add_card_to (deck-c4.c:29)
==396==    by 0x4034C5: hand_from_string (input.c:49)
==396==    by 0x402C66: main (test-eval.c:110)
==396== 
==396== Invalid read of size 4
==396==    at 0x401A32: is_straight_at (eval.c:177)
==396==    by 0x402904: describe_hand (test-eval.c:46)
==396==    by 0x402CE1: main (test-eval.c:116)
==396==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==396== 
==396== 
==396== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==396==  Access not within mapped region at address 0x0
==396==    at 0x401A32: is_straight_at (eval.c:177)
==396==    by 0x402904: describe_hand (test-eval.c:46)
==396==    by 0x402CE1: main (test-eval.c:116)
==396==  If you believe this happened as a result of a stack
==396==  overflow in your program's main thread (unlikely but
==396==  possible), you can try to increase the size of the
==396==  main thread stack using the --main-stacksize= flag.
==396==  The main thread stack size used in this run was 8388608.
==396== 
==396== HEAP SUMMARY:
==396==     in use at exit: 864 bytes in 16 blocks
==396==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==396== 
==396== LEAK SUMMARY:
==396==    definitely lost: 0 bytes in 0 blocks
==396==    indirectly lost: 0 bytes in 0 blocks
==396==      possibly lost: 0 bytes in 0 blocks
==396==    still reachable: 864 bytes in 16 blocks
==396==         suppressed: 0 bytes in 0 blocks
==396== Rerun with --leak-check=full to see details of leaked memory
==396== 
==396== For counts of detected and suppressed errors, rerun with: -v
==396== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==401== Memcheck, a memory error detector
==401== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==401== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==401== Command: ./test-eval inp.10.txt
==401== Parent PID: 400
==401== 
==401== Invalid read of size 8
==401==    at 0x401A2F: is_straight_at (eval.c:177)
==401==    by 0x402904: describe_hand (test-eval.c:46)
==401==    by 0x402CE1: main (test-eval.c:116)
==401==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==401==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x40108F: add_card_to (deck-c4.c:29)
==401==    by 0x4034C5: hand_from_string (input.c:49)
==401==    by 0x402C66: main (test-eval.c:110)
==401== 
==401== Invalid read of size 4
==401==    at 0x401A32: is_straight_at (eval.c:177)
==401==    by 0x402904: describe_hand (test-eval.c:46)
==401==    by 0x402CE1: main (test-eval.c:116)
==401==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==401== 
==401== 
==401== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==401==  Access not within mapped region at address 0x0
==401==    at 0x401A32: is_straight_at (eval.c:177)
==401==    by 0x402904: describe_hand (test-eval.c:46)
==401==    by 0x402CE1: main (test-eval.c:116)
==401==  If you believe this happened as a result of a stack
==401==  overflow in your program's main thread (unlikely but
==401==  possible), you can try to increase the size of the
==401==  main thread stack using the --main-stacksize= flag.
==401==  The main thread stack size used in this run was 8388608.
==401== 
==401== HEAP SUMMARY:
==401==     in use at exit: 896 bytes in 18 blocks
==401==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==401== 
==401== LEAK SUMMARY:
==401==    definitely lost: 0 bytes in 0 blocks
==401==    indirectly lost: 0 bytes in 0 blocks
==401==      possibly lost: 0 bytes in 0 blocks
==401==    still reachable: 896 bytes in 18 blocks
==401==         suppressed: 0 bytes in 0 blocks
==401== Rerun with --leak-check=full to see details of leaked memory
==401== 
==401== For counts of detected and suppressed errors, rerun with: -v
==401== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
