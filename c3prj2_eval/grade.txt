Grading at Mon May 11 02:43:11 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99 -g   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==648== Memcheck, a memory error detector
==648== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==648== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==648== Command: ./test-eval inp.1.txt
==648== Parent PID: 647
==648== 
==648== Invalid read of size 8
==648==    at 0x401A2F: is_straight_at (eval.c:177)
==648==    by 0x4027B7: describe_hand (test-eval.c:49)
==648==    by 0x402B5D: main (test-eval.c:116)
==648==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==648==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==648==    by 0x40108F: add_card_to (deck-c4.c:29)
==648==    by 0x403341: hand_from_string (input.c:49)
==648==    by 0x402AE2: main (test-eval.c:110)
==648== 
==648== Invalid read of size 4
==648==    at 0x401A32: is_straight_at (eval.c:177)
==648==    by 0x4027B7: describe_hand (test-eval.c:49)
==648==    by 0x402B5D: main (test-eval.c:116)
==648==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==648== 
==648== 
==648== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==648==  Access not within mapped region at address 0x0
==648==    at 0x401A32: is_straight_at (eval.c:177)
==648==    by 0x4027B7: describe_hand (test-eval.c:49)
==648==    by 0x402B5D: main (test-eval.c:116)
==648==  If you believe this happened as a result of a stack
==648==  overflow in your program's main thread (unlikely but
==648==  possible), you can try to increase the size of the
==648==  main thread stack using the --main-stacksize= flag.
==648==  The main thread stack size used in this run was 8388608.
==648== 
==648== HEAP SUMMARY:
==648==     in use at exit: 896 bytes in 18 blocks
==648==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==648== 
==648== LEAK SUMMARY:
==648==    definitely lost: 0 bytes in 0 blocks
==648==    indirectly lost: 0 bytes in 0 blocks
==648==      possibly lost: 0 bytes in 0 blocks
==648==    still reachable: 896 bytes in 18 blocks
==648==         suppressed: 0 bytes in 0 blocks
==648== Rerun with --leak-check=full to see details of leaked memory
==648== 
==648== For counts of detected and suppressed errors, rerun with: -v
==648== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==653== Memcheck, a memory error detector
==653== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==653== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==653== Command: ./test-eval inp.2.txt
==653== Parent PID: 652
==653== 
==653== Invalid read of size 8
==653==    at 0x401A2F: is_straight_at (eval.c:177)
==653==    by 0x4027B7: describe_hand (test-eval.c:49)
==653==    by 0x402B5D: main (test-eval.c:116)
==653==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==653==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==653==    by 0x40108F: add_card_to (deck-c4.c:29)
==653==    by 0x403341: hand_from_string (input.c:49)
==653==    by 0x402AE2: main (test-eval.c:110)
==653== 
==653== Invalid read of size 4
==653==    at 0x401A32: is_straight_at (eval.c:177)
==653==    by 0x4027B7: describe_hand (test-eval.c:49)
==653==    by 0x402B5D: main (test-eval.c:116)
==653==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==653== 
==653== 
==653== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==653==  Access not within mapped region at address 0x0
==653==    at 0x401A32: is_straight_at (eval.c:177)
==653==    by 0x4027B7: describe_hand (test-eval.c:49)
==653==    by 0x402B5D: main (test-eval.c:116)
==653==  If you believe this happened as a result of a stack
==653==  overflow in your program's main thread (unlikely but
==653==  possible), you can try to increase the size of the
==653==  main thread stack using the --main-stacksize= flag.
==653==  The main thread stack size used in this run was 8388608.
==653== 
==653== HEAP SUMMARY:
==653==     in use at exit: 880 bytes in 17 blocks
==653==   total heap usage: 28 allocs, 11 frees, 9,272 bytes allocated
==653== 
==653== LEAK SUMMARY:
==653==    definitely lost: 0 bytes in 0 blocks
==653==    indirectly lost: 0 bytes in 0 blocks
==653==      possibly lost: 0 bytes in 0 blocks
==653==    still reachable: 880 bytes in 17 blocks
==653==         suppressed: 0 bytes in 0 blocks
==653== Rerun with --leak-check=full to see details of leaked memory
==653== 
==653== For counts of detected and suppressed errors, rerun with: -v
==653== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==658== Memcheck, a memory error detector
==658== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==658== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==658== Command: ./test-eval inp.3.txt
==658== Parent PID: 657
==658== 
==658== Invalid read of size 8
==658==    at 0x401A2F: is_straight_at (eval.c:177)
==658==    by 0x4027B7: describe_hand (test-eval.c:49)
==658==    by 0x402B5D: main (test-eval.c:116)
==658==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==658==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==658==    by 0x40108F: add_card_to (deck-c4.c:29)
==658==    by 0x403341: hand_from_string (input.c:49)
==658==    by 0x402AE2: main (test-eval.c:110)
==658== 
==658== Invalid read of size 4
==658==    at 0x401A32: is_straight_at (eval.c:177)
==658==    by 0x4027B7: describe_hand (test-eval.c:49)
==658==    by 0x402B5D: main (test-eval.c:116)
==658==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==658== 
==658== 
==658== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==658==  Access not within mapped region at address 0x0
==658==    at 0x401A32: is_straight_at (eval.c:177)
==658==    by 0x4027B7: describe_hand (test-eval.c:49)
==658==    by 0x402B5D: main (test-eval.c:116)
==658==  If you believe this happened as a result of a stack
==658==  overflow in your program's main thread (unlikely but
==658==  possible), you can try to increase the size of the
==658==  main thread stack using the --main-stacksize= flag.
==658==  The main thread stack size used in this run was 8388608.
==658== 
==658== HEAP SUMMARY:
==658==     in use at exit: 864 bytes in 16 blocks
==658==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==658== 
==658== LEAK SUMMARY:
==658==    definitely lost: 0 bytes in 0 blocks
==658==    indirectly lost: 0 bytes in 0 blocks
==658==      possibly lost: 0 bytes in 0 blocks
==658==    still reachable: 864 bytes in 16 blocks
==658==         suppressed: 0 bytes in 0 blocks
==658== Rerun with --leak-check=full to see details of leaked memory
==658== 
==658== For counts of detected and suppressed errors, rerun with: -v
==658== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==663== Memcheck, a memory error detector
==663== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==663== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==663== Command: ./test-eval inp.4.txt
==663== Parent PID: 662
==663== 
==663== Invalid read of size 8
==663==    at 0x401A2F: is_straight_at (eval.c:177)
==663==    by 0x4027B7: describe_hand (test-eval.c:49)
==663==    by 0x402B5D: main (test-eval.c:116)
==663==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==663==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==663==    by 0x40108F: add_card_to (deck-c4.c:29)
==663==    by 0x403341: hand_from_string (input.c:49)
==663==    by 0x402AE2: main (test-eval.c:110)
==663== 
==663== Invalid read of size 4
==663==    at 0x401A32: is_straight_at (eval.c:177)
==663==    by 0x4027B7: describe_hand (test-eval.c:49)
==663==    by 0x402B5D: main (test-eval.c:116)
==663==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==663== 
==663== 
==663== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==663==  Access not within mapped region at address 0x0
==663==    at 0x401A32: is_straight_at (eval.c:177)
==663==    by 0x4027B7: describe_hand (test-eval.c:49)
==663==    by 0x402B5D: main (test-eval.c:116)
==663==  If you believe this happened as a result of a stack
==663==  overflow in your program's main thread (unlikely but
==663==  possible), you can try to increase the size of the
==663==  main thread stack using the --main-stacksize= flag.
==663==  The main thread stack size used in this run was 8388608.
==663== 
==663== HEAP SUMMARY:
==663==     in use at exit: 896 bytes in 18 blocks
==663==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==663== 
==663== LEAK SUMMARY:
==663==    definitely lost: 0 bytes in 0 blocks
==663==    indirectly lost: 0 bytes in 0 blocks
==663==      possibly lost: 0 bytes in 0 blocks
==663==    still reachable: 896 bytes in 18 blocks
==663==         suppressed: 0 bytes in 0 blocks
==663== Rerun with --leak-check=full to see details of leaked memory
==663== 
==663== For counts of detected and suppressed errors, rerun with: -v
==663== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==668== Memcheck, a memory error detector
==668== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==668== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==668== Command: ./test-eval inp.5.txt
==668== Parent PID: 667
==668== 
==668== Invalid read of size 8
==668==    at 0x401A2F: is_straight_at (eval.c:177)
==668==    by 0x4027B7: describe_hand (test-eval.c:49)
==668==    by 0x402B5D: main (test-eval.c:116)
==668==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==668==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==668==    by 0x40108F: add_card_to (deck-c4.c:29)
==668==    by 0x403341: hand_from_string (input.c:49)
==668==    by 0x402AE2: main (test-eval.c:110)
==668== 
==668== Invalid read of size 4
==668==    at 0x401A32: is_straight_at (eval.c:177)
==668==    by 0x4027B7: describe_hand (test-eval.c:49)
==668==    by 0x402B5D: main (test-eval.c:116)
==668==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==668== 
==668== 
==668== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==668==  Access not within mapped region at address 0x0
==668==    at 0x401A32: is_straight_at (eval.c:177)
==668==    by 0x4027B7: describe_hand (test-eval.c:49)
==668==    by 0x402B5D: main (test-eval.c:116)
==668==  If you believe this happened as a result of a stack
==668==  overflow in your program's main thread (unlikely but
==668==  possible), you can try to increase the size of the
==668==  main thread stack using the --main-stacksize= flag.
==668==  The main thread stack size used in this run was 8388608.
==668== 
==668== HEAP SUMMARY:
==668==     in use at exit: 864 bytes in 16 blocks
==668==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==668== 
==668== LEAK SUMMARY:
==668==    definitely lost: 0 bytes in 0 blocks
==668==    indirectly lost: 0 bytes in 0 blocks
==668==      possibly lost: 0 bytes in 0 blocks
==668==    still reachable: 864 bytes in 16 blocks
==668==         suppressed: 0 bytes in 0 blocks
==668== Rerun with --leak-check=full to see details of leaked memory
==668== 
==668== For counts of detected and suppressed errors, rerun with: -v
==668== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==673== Memcheck, a memory error detector
==673== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==673== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==673== Command: ./test-eval inp.6.txt
==673== Parent PID: 672
==673== 
==673== Invalid read of size 8
==673==    at 0x401A2F: is_straight_at (eval.c:177)
==673==    by 0x402780: describe_hand (test-eval.c:46)
==673==    by 0x402B5D: main (test-eval.c:116)
==673==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==673==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==673==    by 0x40108F: add_card_to (deck-c4.c:29)
==673==    by 0x403341: hand_from_string (input.c:49)
==673==    by 0x402AE2: main (test-eval.c:110)
==673== 
==673== Invalid read of size 4
==673==    at 0x401A32: is_straight_at (eval.c:177)
==673==    by 0x402780: describe_hand (test-eval.c:46)
==673==    by 0x402B5D: main (test-eval.c:116)
==673==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==673== 
==673== 
==673== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==673==  Access not within mapped region at address 0x0
==673==    at 0x401A32: is_straight_at (eval.c:177)
==673==    by 0x402780: describe_hand (test-eval.c:46)
==673==    by 0x402B5D: main (test-eval.c:116)
==673==  If you believe this happened as a result of a stack
==673==  overflow in your program's main thread (unlikely but
==673==  possible), you can try to increase the size of the
==673==  main thread stack using the --main-stacksize= flag.
==673==  The main thread stack size used in this run was 8388608.
==673== 
==673== HEAP SUMMARY:
==673==     in use at exit: 896 bytes in 18 blocks
==673==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==673== 
==673== LEAK SUMMARY:
==673==    definitely lost: 0 bytes in 0 blocks
==673==    indirectly lost: 0 bytes in 0 blocks
==673==      possibly lost: 0 bytes in 0 blocks
==673==    still reachable: 896 bytes in 18 blocks
==673==         suppressed: 0 bytes in 0 blocks
==673== Rerun with --leak-check=full to see details of leaked memory
==673== 
==673== For counts of detected and suppressed errors, rerun with: -v
==673== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==678== Memcheck, a memory error detector
==678== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==678== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==678== Command: ./test-eval inp.7.txt
==678== Parent PID: 677
==678== 
==678== Invalid read of size 8
==678==    at 0x401A2F: is_straight_at (eval.c:177)
==678==    by 0x4027B7: describe_hand (test-eval.c:49)
==678==    by 0x402B5D: main (test-eval.c:116)
==678==  Address 0x520c4d0 is 0 bytes after a block of size 48 alloc'd
==678==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==678==    by 0x40108F: add_card_to (deck-c4.c:29)
==678==    by 0x403341: hand_from_string (input.c:49)
==678==    by 0x402AE2: main (test-eval.c:110)
==678== 
==678== Invalid read of size 4
==678==    at 0x401A32: is_straight_at (eval.c:177)
==678==    by 0x4027B7: describe_hand (test-eval.c:49)
==678==    by 0x402B5D: main (test-eval.c:116)
==678==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==678== 
==678== 
==678== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==678==  Access not within mapped region at address 0x0
==678==    at 0x401A32: is_straight_at (eval.c:177)
==678==    by 0x4027B7: describe_hand (test-eval.c:49)
==678==    by 0x402B5D: main (test-eval.c:116)
==678==  If you believe this happened as a result of a stack
==678==  overflow in your program's main thread (unlikely but
==678==  possible), you can try to increase the size of the
==678==  main thread stack using the --main-stacksize= flag.
==678==  The main thread stack size used in this run was 8388608.
==678== 
==678== HEAP SUMMARY:
==678==     in use at exit: 896 bytes in 18 blocks
==678==   total heap usage: 294 allocs, 276 frees, 14,736 bytes allocated
==678== 
==678== LEAK SUMMARY:
==678==    definitely lost: 0 bytes in 0 blocks
==678==    indirectly lost: 0 bytes in 0 blocks
==678==      possibly lost: 0 bytes in 0 blocks
==678==    still reachable: 896 bytes in 18 blocks
==678==         suppressed: 0 bytes in 0 blocks
==678== Rerun with --leak-check=full to see details of leaked memory
==678== 
==678== For counts of detected and suppressed errors, rerun with: -v
==678== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==683== Memcheck, a memory error detector
==683== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==683== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==683== Command: ./test-eval inp.8.txt
==683== Parent PID: 682
==683== 
==683== Invalid read of size 8
==683==    at 0x401A2F: is_straight_at (eval.c:177)
==683==    by 0x4027B7: describe_hand (test-eval.c:49)
==683==    by 0x402B5D: main (test-eval.c:116)
==683==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==683==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==683==    by 0x40108F: add_card_to (deck-c4.c:29)
==683==    by 0x403341: hand_from_string (input.c:49)
==683==    by 0x402AE2: main (test-eval.c:110)
==683== 
==683== Invalid read of size 4
==683==    at 0x401A32: is_straight_at (eval.c:177)
==683==    by 0x4027B7: describe_hand (test-eval.c:49)
==683==    by 0x402B5D: main (test-eval.c:116)
==683==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==683== 
==683== 
==683== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==683==  Access not within mapped region at address 0x0
==683==    at 0x401A32: is_straight_at (eval.c:177)
==683==    by 0x4027B7: describe_hand (test-eval.c:49)
==683==    by 0x402B5D: main (test-eval.c:116)
==683==  If you believe this happened as a result of a stack
==683==  overflow in your program's main thread (unlikely but
==683==  possible), you can try to increase the size of the
==683==  main thread stack using the --main-stacksize= flag.
==683==  The main thread stack size used in this run was 8388608.
==683== 
==683== HEAP SUMMARY:
==683==     in use at exit: 896 bytes in 18 blocks
==683==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==683== 
==683== LEAK SUMMARY:
==683==    definitely lost: 0 bytes in 0 blocks
==683==    indirectly lost: 0 bytes in 0 blocks
==683==      possibly lost: 0 bytes in 0 blocks
==683==    still reachable: 896 bytes in 18 blocks
==683==         suppressed: 0 bytes in 0 blocks
==683== Rerun with --leak-check=full to see details of leaked memory
==683== 
==683== For counts of detected and suppressed errors, rerun with: -v
==683== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==688== Memcheck, a memory error detector
==688== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==688== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==688== Command: ./test-eval inp.9.txt
==688== Parent PID: 687
==688== 
==688== Invalid read of size 8
==688==    at 0x401A2F: is_straight_at (eval.c:177)
==688==    by 0x402780: describe_hand (test-eval.c:46)
==688==    by 0x402B5D: main (test-eval.c:116)
==688==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==688==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==688==    by 0x40108F: add_card_to (deck-c4.c:29)
==688==    by 0x403341: hand_from_string (input.c:49)
==688==    by 0x402AE2: main (test-eval.c:110)
==688== 
==688== Invalid read of size 4
==688==    at 0x401A32: is_straight_at (eval.c:177)
==688==    by 0x402780: describe_hand (test-eval.c:46)
==688==    by 0x402B5D: main (test-eval.c:116)
==688==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==688== 
==688== 
==688== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==688==  Access not within mapped region at address 0x0
==688==    at 0x401A32: is_straight_at (eval.c:177)
==688==    by 0x402780: describe_hand (test-eval.c:46)
==688==    by 0x402B5D: main (test-eval.c:116)
==688==  If you believe this happened as a result of a stack
==688==  overflow in your program's main thread (unlikely but
==688==  possible), you can try to increase the size of the
==688==  main thread stack using the --main-stacksize= flag.
==688==  The main thread stack size used in this run was 8388608.
==688== 
==688== HEAP SUMMARY:
==688==     in use at exit: 864 bytes in 16 blocks
==688==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==688== 
==688== LEAK SUMMARY:
==688==    definitely lost: 0 bytes in 0 blocks
==688==    indirectly lost: 0 bytes in 0 blocks
==688==      possibly lost: 0 bytes in 0 blocks
==688==    still reachable: 864 bytes in 16 blocks
==688==         suppressed: 0 bytes in 0 blocks
==688== Rerun with --leak-check=full to see details of leaked memory
==688== 
==688== For counts of detected and suppressed errors, rerun with: -v
==688== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==693== Memcheck, a memory error detector
==693== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==693== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==693== Command: ./test-eval inp.10.txt
==693== Parent PID: 692
==693== 
==693== Invalid read of size 8
==693==    at 0x401A2F: is_straight_at (eval.c:177)
==693==    by 0x402780: describe_hand (test-eval.c:46)
==693==    by 0x402B5D: main (test-eval.c:116)
==693==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==693==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==693==    by 0x40108F: add_card_to (deck-c4.c:29)
==693==    by 0x403341: hand_from_string (input.c:49)
==693==    by 0x402AE2: main (test-eval.c:110)
==693== 
==693== Invalid read of size 4
==693==    at 0x401A32: is_straight_at (eval.c:177)
==693==    by 0x402780: describe_hand (test-eval.c:46)
==693==    by 0x402B5D: main (test-eval.c:116)
==693==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==693== 
==693== 
==693== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==693==  Access not within mapped region at address 0x0
==693==    at 0x401A32: is_straight_at (eval.c:177)
==693==    by 0x402780: describe_hand (test-eval.c:46)
==693==    by 0x402B5D: main (test-eval.c:116)
==693==  If you believe this happened as a result of a stack
==693==  overflow in your program's main thread (unlikely but
==693==  possible), you can try to increase the size of the
==693==  main thread stack using the --main-stacksize= flag.
==693==  The main thread stack size used in this run was 8388608.
==693== 
==693== HEAP SUMMARY:
==693==     in use at exit: 896 bytes in 18 blocks
==693==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==693== 
==693== LEAK SUMMARY:
==693==    definitely lost: 0 bytes in 0 blocks
==693==    indirectly lost: 0 bytes in 0 blocks
==693==      possibly lost: 0 bytes in 0 blocks
==693==    still reachable: 896 bytes in 18 blocks
==693==         suppressed: 0 bytes in 0 blocks
==693== Rerun with --leak-check=full to see details of leaked memory
==693== 
==693== For counts of detected and suppressed errors, rerun with: -v
==693== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
